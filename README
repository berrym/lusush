LUSUSH

==== OVERVIEW

    Lusush is a shell for the UNIX environment.  It is simple and essentially
    featureless.  Originally developed as an educational experience to gain
    more familiarity with programming in a UNIX environment, that is what the
    project remains today.

    Lusush is useless for most people.  It has no job control, no scripting
    language, and basically lacks most features that people require from a
    shell.  It is however a lightweight alternative to shells with those
    features, and does it's job well.

    It should be noted that new features are being added all the time, and
    support for some of the mentioned missing features is already under way.

    Should anybody find lusush or it's source code useful, perhaps as a How
    Not To guide in the world of UNIX programming, please let me know.

==== INSTALLATION

    Basic installation can be achieved with the following commands.

    ./configure
    make install

    This will put the binary lusush in the top level directory where you can
    move it to any site specific location you so desire.

    Optionally configure can take some arguments that you may want to set.
    For example you may want to tell it where to look for libraries.
    On my NetBSD machine I would give it something that looked like this so
    that I can link readline into lusush.  This assumes you have installed
    the readline development libraries and they can be found in /usr/pkg/lib.

    ./configure LDFLAGS="-L/usr/pkg/lib -R/usr/pkg/lib"

==== BASIC USAGE

    Lusush can be run as a login shell or interactively.  You type commands
    and lusush will attempt to locate them, then execute them.

    Upon running lusush you will be greeted with a prompt, usually the current
    directory followed by a percent sign.

    e.g. /home/you%
         /%
         /usr/include%
    etc.

    To see a complete list of builtin commands and their description, run help.

    e.g. /home/you% help

    You may also run help followed by an optional command you specifically want
    to see some information on.

    e.g. /home/you% help pwd

    If you wish to use the redirection feature of lusush, it's the same as
    typical shell convention except that you are required to leave no space
    between the redirection symbol and the requisite file name.  This is
    because of the limited nature of lusush's parser.

    e.g. /home/you% ls >tmp
         /home/you% cat <tmp >tmp2

    NOT  /home/you% ls > tmp
         /home/you% cat < tmp > tmp2

    For output redirection you can choose to append to a file as an alternative
    to overwriting if you wish by using the >> operator instead of >.

    e.g. /home/you% echo 1 >testfile            # this will overwrite testfile
         /home/you% echo 2 >>testfile           # this will append to testfile

    To set an environment variable use the setenv command.

    e.g. /home/you% setenv MYVAR testing123

    And to delete an environment variable use unsetenv.

    e.g. /home/you% unsetenv MYVAR

    Commands can be chained together so they are executed one after the other
    by inserting a semicolon between them.  There is no required spacing rule
    as with the redirection feature.

    e.g /home/you% echo 1; echo 2 ; echo 3 ;echo 4;echo 5

    The output of a command can be piped into the input of another by using
    pipes.

    e.g. /home/you% ps ax | grep init

    Chained pipes are allowed, and like the semicolon above there are no
    spacing rules when using pipes.

    e.g /home/you% ps ax|grep init | more
        /home/you% ls -alF |less

    Lusush can read from a file with commands in it and execute those commands.
    This is a basic form of scripting but it works.  To do it, invoke lusush
    with script as a parameter

    e.g /home/you/lab% lusush scriptfile

    Control-C (SIGINT) is ignored by default to allow for normal operation
    of external programs executed by lusush, use exit to leave the shell.

Luny Lususnaturae <trismegustis@gmail.com>
