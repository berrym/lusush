# Lusush Shell Development Rules for AI Assistants

## Project Overview
This repository contains Lusush, a professional shell with complete GNU Readline integration. The shell provides modern line editing features, comprehensive tab completion, theme support, and advanced history management.

## ðŸŽ‰ CURRENT STATUS: PRODUCTION READY
- **READLINE INTEGRATION**: âœ… **COMPLETE** - Full GNU Readline integration working perfectly
- **LEGACY REMOVAL**: âœ… **COMPLETE** - All linenoise and LLE code successfully removed
- **FEATURE PARITY**: âœ… **COMPLETE** - All Lusush features preserved and enhanced
- **BUILD SYSTEM**: âœ… **COMPLETE** - Meson build with readline dependency
- **Language**: C99 with strict standards
- **Architecture**: Modern shell with readline-powered line editing

## File Structure
```
lusush/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ builtins/            # Built-in command implementations
â”‚   â”œâ”€â”€ debug/               # Debug and profiling system
â”‚   â”œâ”€â”€ libhashtable/        # Hash table library
â”‚   â”œâ”€â”€ readline_integration.c # Complete readline wrapper
â”‚   â”œâ”€â”€ input.c              # Unified input system
â”‚   â”œâ”€â”€ lusush.c             # Main shell
â”‚   â”œâ”€â”€ completion.c         # Tab completion system
â”‚   â”œâ”€â”€ themes.c             # Theme management
â”‚   â”œâ”€â”€ prompt.c             # Prompt generation
â”‚   â””â”€â”€ *.c                  # Other core components
â”œâ”€â”€ include/
â”‚   â”œâ”€â”€ readline_integration.h # Readline API
â”‚   â”œâ”€â”€ completion.h         # Completion system
â”‚   â”œâ”€â”€ themes.h             # Theme system
â”‚   â””â”€â”€ *.h                  # Other headers
â”œâ”€â”€ builddir/
â”‚   â””â”€â”€ lusush               # Compiled binary
â””â”€â”€ meson.build              # Build configuration
```

## âœ… COMPLETED FEATURES

### Core Readline Integration
- **Complete GNU Readline wrapper** - Full feature set available
- **History with deduplication** - Automatic duplicate prevention
- **Tab completion** - Integrated with existing completion engine
- **Multiline support** - Complex command structures (if/for/while/case)
- **Key bindings** - All standard readline shortcuts (Ctrl+A/E/L/U/K/W/R)
- **Signal handling** - Proper TTY and signal management

### Enhanced Features
- **Theme integration** - Full compatibility with Lusush theme system
- **Syntax highlighting** - Framework ready for enhancement
- **Advanced completion** - Commands, files, variables, aliases, network hosts
- **Professional prompts** - Dynamic, themed prompts with Git integration
- **Cross-platform** - Works on Linux, macOS, and Unix systems

### Code Quality
- **Clean architecture** - Clear separation of concerns
- **Memory safety** - Proper resource management
- **Error handling** - Graceful failure modes
- **Performance** - Sub-millisecond response times
- **Documentation** - Comprehensive inline documentation

## Code Standards
```c
// Function naming: descriptive and clear
bool lusush_readline_init(void);
void lusush_history_add(const char *line);
char *lusush_generate_prompt(void);

// Structure naming: component_t pattern
typedef struct {
    char *buffer;
    size_t length;
    size_t capacity;
} lusush_completions_t;

// Error handling: always return bool for success/failure
bool lusush_function(args) {
    if (!args) return false;
    // implementation
    return true;
}

// Documentation: comprehensive function docs
/**
 * Initialize the readline system for lusush.
 * Sets up completion, history, key bindings, and syntax highlighting.
 *
 * @return true on success, false on failure
 */
bool lusush_readline_init(void);
```

## Build Commands
```bash
# Setup build directory
meson setup builddir

# Build the shell
ninja -C builddir

# Run tests
echo 'echo "test"' | ./builddir/lusush

# Clean rebuild
meson setup builddir --wipe
```

## Key Design Principles
1. **GNU Readline Integration**: Leverage proven library for line editing
2. **Feature Preservation**: Maintain all existing Lusush functionality
3. **Performance**: Sub-millisecond response times for common operations
4. **Memory Safety**: Proper resource management and bounds checking
5. **Modular Architecture**: Clear separation between components
6. **Cross-platform**: Works across all Unix-like systems
7. **Professional Quality**: Production-ready code standards

## Testing Requirements
Every change should include:
- **Compilation test**: Ensure clean build without warnings
- **Functionality test**: Basic command execution and features
- **Interactive test**: Manual verification of readline features
- **Regression test**: Ensure existing features still work
- **Memory test**: No leaks with proper cleanup

### Common Development Patterns

### Readline Integration
```c
// Initialize readline system
if (!lusush_readline_init()) {
    fprintf(stderr, "Failed to initialize readline\n");
    return false;
}

// Get input with themed prompt
char *line = lusush_readline_with_prompt(NULL);

// Add to history with deduplication
if (line && *line) {
    lusush_history_add(line);
}
```

### Completion Integration
```c
// Setup completion
lusush_completion_setup();

// Add completions
lusush_completions_t completions = {0, NULL};
lusush_add_completion(&completions, "example");
lusush_free_completions(&completions);
```

### Theme Integration
```c
// Generate themed prompt
char *prompt = lusush_generate_prompt();

// Update prompt when theme changes
lusush_prompt_update();
```

## Integration Points with Lusush Core
- **Theme System**: `src/themes.c` - Full integration with readline prompts
- **Completion**: `src/completion.c` - Seamless tab completion integration
- **Configuration**: `src/config.c` - User settings respected by readline
- **History**: `src/posix_history.c` - Enhanced history with deduplication
- **Main Shell**: `src/lusush.c` - Unified input system

## Performance Requirements
- Character insertion: < 1ms
- Tab completion: < 50ms
- History search: < 10ms
- Theme switching: < 5ms
- Startup time: < 100ms
- Memory usage: < 5MB total

## Common Development Tasks

### Adding New Features
1. **Design**: Plan integration with existing readline system
2. **Implement**: Add to appropriate module (completion, themes, etc.)
3. **Test**: Ensure compatibility with readline integration
4. **Document**: Add comprehensive documentation
5. **Verify**: Test in both interactive and non-interactive modes

### Debugging
```bash
# Enable debug output
export LUSUSH_DEBUG=1
./builddir/lusush

# Check readline integration
echo 'set show-all-if-ambiguous on' > ~/.inputrc
./builddir/lusush

# Memory debugging
valgrind --leak-check=full ./builddir/lusush
```

### Performance Profiling
```bash
# Profile with perf
perf record ./builddir/lusush -c 'for i in {1..1000}; do echo $i; done'
perf report

# Benchmark completion
time echo -e 'ls /usr/bin/g<TAB>' | ./builddir/lusush
```

## Current Development Status

### âœ… COMPLETED AND STABLE
1. **GNU Readline integration** - Full feature set working
2. **Theme support** - Dynamic prompts with color themes
3. **Tab completion** - Commands, files, variables, aliases
4. **History management** - Persistent history with deduplication
5. **Multiline editing** - Complex command structures
6. **Signal handling** - Proper Ctrl+C/D/Z handling
7. **Build system** - Meson with readline dependency

### ðŸŽ¯ READY FOR ENHANCEMENT
1. **Advanced syntax highlighting** - Real-time command parsing
2. **Enhanced completion** - Context-aware suggestions
3. **Vi mode support** - Alternative key binding mode
4. **Plugin system** - Extensible completion providers
5. **Advanced themes** - Dynamic status indicators

## Quick Reference: Key Files
- `src/readline_integration.c` - Core readline wrapper implementation
- `include/readline_integration.h` - Readline API definitions
- `src/input.c` - Unified input system for interactive/non-interactive
- `src/completion.c` - Tab completion engine
- `src/themes.c` - Theme system with prompt generation
- `meson.build` - Build configuration with readline dependency

## Development Workflow
1. **Understand current state** - Review existing readline integration
2. **Plan changes** - Consider impact on readline functionality
3. **Implement** - Follow established patterns and standards
4. **Test thoroughly** - Both automated and interactive testing
5. **Document** - Update relevant documentation
6. **Commit with clear messages** - Describe changes and impact

## Success Criteria for New Features
- **Preserves existing functionality** - No regressions
- **Integrates with readline** - Works with standard shortcuts
- **Maintains performance** - No significant slowdowns
- **Cross-platform compatible** - Works on all supported systems
- **Well documented** - Clear API and usage examples
- **Memory safe** - No leaks or unsafe operations

## Final Notes

Lusush now provides a **professional shell experience** with:
- Complete GNU Readline integration
- Modern line editing features
- Rich tab completion
- Persistent history with deduplication
- Dynamic themed prompts
- Cross-platform compatibility

The codebase is **production ready** and follows established patterns for easy maintenance and enhancement.

**Development Focus**: Enhance existing features rather than replacing core systems. The readline integration is complete and stable.
