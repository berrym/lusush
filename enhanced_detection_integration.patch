--- a/src/init.c
+++ b/src/init.c
@@ -12,6 +12,7 @@
 #include "../include/symtable.h"
 #include "../include/theme_integration.h"
 #include "../include/termcap.h"
+#include "line_editor/enhanced_terminal_detection.h"

 #include <errno.h>
 #include <fcntl.h>
@@ -232,14 +233,28 @@ int init(int argc, char **argv, FILE **in) {
     // 1. Determine login vs non-login shell
     IS_LOGIN_SHELL = (**argv == '-') || shell_opts.login_shell;

-    // 2. Determine interactive vs non-interactive
+    // 2. Initialize enhanced terminal detection
+    if (!lle_enhanced_terminal_detection_init()) {
+        fprintf(stderr, "Warning: Failed to initialize enhanced terminal detection\n");
+    }
+
+    // 3. Determine interactive vs non-interactive using enhanced detection
     bool has_script_file = (optind && argv[optind] && *argv[optind]);
     bool forced_interactive = shell_opts.interactive;
     bool stdin_is_terminal = isatty(STDIN_FILENO);
+    bool enhanced_interactive = lle_enhanced_terminal_should_be_interactive();

     // Debug: Show TTY detection details
     const char *debug_env = getenv("LLE_DEBUG");
     if (debug_env && (strcmp(debug_env, "1") == 0 || strcmp(debug_env, "true") == 0)) {
+        fprintf(stderr, "[INIT] Enhanced Terminal Detection Report:\n");
+        fprintf(stderr, "%s\n", lle_enhanced_terminal_get_debug_info());
+        fprintf(stderr, "[INIT] Detection Comparison:\n");
+        fprintf(stderr, "[INIT]   Traditional isatty(): %s\n", stdin_is_terminal ? "interactive" : "non-interactive");
+        fprintf(stderr, "[INIT]   Enhanced detection:   %s\n", enhanced_interactive ? "interactive" : "non-interactive");
+        if (enhanced_interactive != stdin_is_terminal) {
+            fprintf(stderr, "[INIT]   *** ENHANCED DETECTION OVERRIDES TRADITIONAL ***\n");
+        }
         fprintf(stderr, "[INIT] TTY Detection: STDIN_FILENO=%d, isatty()=%s\n",
                 STDIN_FILENO, stdin_is_terminal ? "true" : "false");

@@ -295,13 +310,19 @@ int init(int argc, char **argv, FILE **in) {
             }
         }
     } else if (forced_interactive ||
-               (stdin_is_terminal && !shell_opts.stdin_mode)) {
-        // Interactive shell: stdin is terminal OR forced with -i
+               (stdin_is_terminal && !shell_opts.stdin_mode) ||
+               (enhanced_interactive && !shell_opts.stdin_mode)) {
+        // Interactive shell: traditional TTY OR enhanced detection OR forced with -i
         IS_INTERACTIVE_SHELL = true;
         SHELL_TYPE = SHELL_INTERACTIVE;
         *in = stdin;

         // Debug: Show interactive detection
+        if (enhanced_interactive && !stdin_is_terminal) {
+            if (debug_env && (strcmp(debug_env, "1") == 0 || strcmp(debug_env, "true") == 0)) {
+                fprintf(stderr, "[INIT] Enhanced detection enabled interactive mode despite non-TTY stdin\n");
+            }
+        }
         const char *debug_env = getenv("LLE_DEBUG");
         if (debug_env && (strcmp(debug_env, "1") == 0 || strcmp(debug_env, "true") == 0)) {
             fprintf(stderr, "[INIT] Interactive shell detected: forced=%s, stdin_is_terminal=%s, stdin_mode=%s\n",
@@ -432,6 +453,11 @@ int init(int argc, char **argv, FILE **in) {
         atexit(free_input_buffers);
     }

+    // Initialize enhanced terminal features for interactive shells
+    if (IS_INTERACTIVE_SHELL && lle_enhanced_terminal_should_be_interactive()) {
+        // Enhanced terminal detected - ensure optimal configuration
+    }
+
     // Process shebang if the shell is invoked with a script
     if (!IS_INTERACTIVE_SHELL && *in && has_script_file) {
         process_shebang(*in);

--- a/src/line_editor/lle_integration.c
+++ b/src/line_editor/lle_integration.c
@@ -2,6 +2,7 @@

 #include "line_editor.h"
 #include "../include/errors.h"
+#include "enhanced_terminal_detection.h"
 #include "../include/symtable.h"

 #include <errno.h>
@@ -90,11 +91,24 @@ bool lle_integration_init(void) {
     // Clear any previous error
     lle_integration_clear_error();

+    // Get enhanced terminal information
+    const lle_enhanced_terminal_info_t *term_info = lle_enhanced_terminal_get_info();
+
     // Create LLE configuration with sensible defaults for shell use
     lle_config_t config = {
         .max_history_size = 1000,           // Standard shell history size
         .max_undo_actions = 100,            // Reasonable undo limit
         .enable_multiline = true,           // Enable multiline editing
+        .enable_syntax_highlighting = term_info->supports_colors,  // Enable if colors supported
+        .enable_auto_completion = true,     // Enable tab completion
+        .enable_history = true,             // Enable command history
+        .enable_undo = true                 // Enable undo/redo
+    };
+
+    // Override configuration based on enhanced terminal detection
+    if (lle_enhanced_terminal_should_be_interactive()) {
+        // Force enable features for capable terminals
+        config.enable_syntax_highlighting = term_info->supports_colors;
         .enable_syntax_highlighting = true, // Enable syntax highlighting
         .enable_auto_completion = true,     // Enable tab completion
         .enable_history = true,             // Enable command history
@@ -103,6 +117,13 @@ bool lle_integration_init(void) {

     // Create LLE instance with configuration
     lle_global_editor = lle_create_with_config(&config);
+
+    if (debug_mode && lle_global_editor) {
+        fprintf(stderr, "[LLE_INTEGRATION] Configuration applied:\n");
+        fprintf(stderr, "[LLE_INTEGRATION]   Syntax highlighting: %s\n", config.enable_syntax_highlighting ? "enabled" : "disabled");
+        fprintf(stderr, "[LLE_INTEGRATION]   Color support: %s\n", term_info->supports_colors ? "yes" : "no");
+        fprintf(stderr, "[LLE_INTEGRATION]   Interactive mode: %s\n", lle_enhanced_terminal_should_be_interactive() ? "enhanced" : "traditional");
+    }
     if (!lle_global_editor) {
         lle_replacement_set_error("Failed to create LLE instance");
         return false;

--- a/src/line_editor/termcap/lle_termcap.c
+++ b/src/line_editor/termcap/lle_termcap.c
@@ -13,6 +13,7 @@

 #include "lle_termcap.h"
 #include "lle_termcap_internal.h"
+#include "../enhanced_terminal_detection.h"

 #include <errno.h>
 #include <fcntl.h>
@@ -273,13 +274,22 @@ const lle_escape_sequence_t LLE_ESC_SYNCHRONIZED_OUTPUT_END = {"\x1b[?2026l", 8
 int lle_termcap_init(void) {
     if (g_termcap_state.initialized) {
         return LLE_TERMCAP_OK;
     }

-    // Check if we're dealing with a terminal
-    g_terminal_info.is_tty = isatty(STDIN_FILENO) && isatty(STDOUT_FILENO);
+    // Enhanced terminal detection integration
+    const lle_enhanced_terminal_info_t *enhanced_info = lle_enhanced_terminal_get_info();
+
+    // Use enhanced detection for TTY status
+    g_terminal_info.is_tty = enhanced_info->stdin_is_tty && enhanced_info->stdout_is_tty;
+
+    // Override TTY status if enhanced detection suggests interactive mode
+    if (!g_terminal_info.is_tty && lle_enhanced_terminal_should_be_interactive()) {
+        g_terminal_info.is_tty = true;  // Treat as TTY for LLE purposes
+    }

     // Get terminal type from environment (even for non-TTY)
     const char *term_env = getenv("TERM");
     g_terminal_info.term_type = term_env ? term_env : "unknown";
+
+    // Use enhanced color detection
+    g_terminal_info.caps.colors = enhanced_info->supports_colors;
+    g_terminal_info.caps.colors_256 = enhanced_info->supports_256_colors;
+    g_terminal_info.caps.truecolor = enhanced_info->supports_truecolor;

     // Initialize basic capabilities even for non-TTY (preserves color support)
     // This allows prompts to work with colors when output goes to terminal

--- a/src/line_editor/meson.build
+++ b/src/line_editor/meson.build
@@ -10,6 +10,7 @@ lle_sources = [
   'display.c',
   'edit_commands.c',
   'emoji.c',
+  'enhanced_terminal_detection.c',
   'input_handler.c',
   'line_editor.c',
   'lle_integration.c',

--- a/meson.build
+++ b/meson.build
@@ -89,6 +89,7 @@ lusush_sources = [
   'src/line_editor/display.c',
   'src/line_editor/edit_commands.c',
   'src/line_editor/emoji.c',
+  'src/line_editor/enhanced_terminal_detection.c',
   'src/line_editor/input_handler.c',
   'src/line_editor/line_editor.c',
   'src/line_editor/lle_integration.c',
